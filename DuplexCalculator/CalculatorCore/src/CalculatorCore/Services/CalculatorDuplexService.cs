//
// This code was generated by Visual ReCode 1.0.0.0
//

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Grpc.Core;

namespace CalculatorCore.Services
{
    public partial class CalculatorDuplex : Protos.CalculatorDuplex.CalculatorDuplexBase
    {
        private readonly ICalculatorDuplexCallbackContractFactory _callbackContractFactory;
        private readonly ILogger<CalculatorDuplex> _logger;
        
        public CalculatorDuplex(ICalculatorDuplexCallbackContractFactory callbackContractFactory, ILogger<CalculatorDuplex> logger)
        {
            _callbackContractFactory = callbackContractFactory;
            _logger = logger;
        }

        public override async Task Start(IAsyncStreamReader<Protos.CalculatorDuplexAction> requestStream,
                        IServerStreamWriter<Protos.CalculatorDuplexCallback> responseStream,
                        ServerCallContext context)
        {
            try
            {
                var handler = new CalculatorDuplexStreamHandler(_callbackContractFactory, requestStream, responseStream, _logger);
                await handler.RunAsync(context.CancellationToken);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error running callback");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }

    }
}

