//
// This code was generated by Visual ReCode 1.0.0.0
//

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Google.Protobuf;
using Google.Protobuf.WellKnownTypes;
using Grpc.Core;

namespace CalculatorCore.Services
{
    public class CalculatorDuplexCallbackImplementation : global::Microsoft.Samples.Duplex.ICalculatorDuplexCallback
    {
        private readonly IServerStreamWriter<Protos.CalculatorDuplexCallback> _stream;
        private readonly PendingCompletionStore _pendingCompletions;

        public CalculatorDuplexCallbackImplementation(IServerStreamWriter<Protos.CalculatorDuplexCallback> stream, PendingCompletionStore pendingCompletions)
        {
            _stream = stream;
            _pendingCompletions = pendingCompletions;
        }

        public async Task ResultAsync(double value)
        {
            var action = new Protos.CalculatorDuplexCallback.Types.Result
            {
                Value = value,
            };

            var callback = new Protos.CalculatorDuplexCallback
            {
                Result = action
            };

            await _stream.WriteAsync(callback);
        }

        [Obsolete("Use ResultAsync")]
        public void Result(double value) => ResultAsync(value).GetAwaiter().GetResult();

        public async Task EquationAsync(string eqn)
        {
            var action = new Protos.CalculatorDuplexCallback.Types.Equation
            {
                Eqn = eqn,
            };

            var callback = new Protos.CalculatorDuplexCallback
            {
                Equation = action
            };

            await _stream.WriteAsync(callback);
        }

        [Obsolete("Use EquationAsync")]
        public void Equation(string eqn) => EquationAsync(eqn).GetAwaiter().GetResult();
    }
}

