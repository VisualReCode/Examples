//
// This code was generated by Visual ReCode 1.0.0.0
//

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Google.Protobuf;
using Grpc.Core;
using BasicCalculatorCore.Protos;

namespace BasicCalculatorCore.Services
{
    public partial class Calculator : global::BasicCalculatorCore.Protos.Calculator.CalculatorBase
    {
            private readonly Microsoft.Samples.GettingStarted.ICalculator _serviceContract;
            private readonly ILogger<Calculator> _logger;
        
        public Calculator(Microsoft.Samples.GettingStarted.ICalculator serviceContract, ILogger<Calculator> logger)
        {
            _serviceContract = serviceContract;
            _logger = logger;
        }
        
        public override Task<Protos.AddResponse> Add(Protos.AddRequest request, ServerCallContext context)
        {
            try
            {
                var returnValue = _serviceContract.Add(request.Value1, request.Value2);
                var response = new Protos.AddResponse { Value = returnValue };
                return Task.FromResult(response);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error invoking Add");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }
        
        public override Task<Protos.SubtractResponse> Subtract(Protos.SubtractRequest request, ServerCallContext context)
        {
            try
            {
                var returnValue = _serviceContract.Subtract(request.Value1, request.Value2);
                var response = new Protos.SubtractResponse { Value = returnValue };
                return Task.FromResult(response);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error invoking Subtract");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }
        
        public override Task<Protos.MultiplyResponse> Multiply(Protos.MultiplyRequest request, ServerCallContext context)
        {
            try
            {
                var returnValue = _serviceContract.Multiply(request.Value1, request.Value2);
                var response = new Protos.MultiplyResponse { Value = returnValue };
                return Task.FromResult(response);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error invoking Multiply");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }
        
        public override Task<Protos.DivideResponse> Divide(Protos.DivideRequest request, ServerCallContext context)
        {
            try
            {
                var returnValue = _serviceContract.Divide(request.Value1, request.Value2);
                var response = new Protos.DivideResponse { Value = returnValue };
                return Task.FromResult(response);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error invoking Divide");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }
        
    }
}

