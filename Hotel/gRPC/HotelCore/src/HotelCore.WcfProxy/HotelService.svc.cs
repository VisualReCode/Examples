//
// This code was generated by Visual ReCode 1.0.0.0
//

using System;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using System.ServiceModel;
using System.Threading;
using System.Threading.Tasks;
using Google.Protobuf;
using Google.Protobuf.WellKnownTypes;
using Grpc.Core;

namespace HotelCore.WcfProxy
{
    public partial class HotelService : IHotelService, IDisposable
    {
        private readonly Channel _channel;
        private readonly HotelCore.WcfProxy.Protos.HotelService.HotelServiceClient _client;
        
        public HotelService()
        {
            var url = ConfigurationManager.AppSettings.Get("recode:GrpcServerUrl");
            _channel = new Channel(url, ChannelCredentials.Insecure);
            _client = new HotelCore.WcfProxy.Protos.HotelService.HotelServiceClient(_channel);
        }
        
        public async Task<IList<Room>> GetAvailableRooms(DateTimeOffset checkInDate, DateTimeOffset checkOutDate)
        {
            var request = new Protos.GetAvailableRoomsRequest
            {
                CheckInDate = Timestamp.FromDateTimeOffset(checkInDate),
                CheckOutDate = Timestamp.FromDateTimeOffset(checkOutDate),
            };
            var response = await _client.GetAvailableRoomsAsync(request);
            var returnValue = response.Values.Select(x => (global::HotelCore.WcfProxy.Room)x).ToList();
            return returnValue;
        }

        
        public async Task<Room> GetRoom(int number)
        {
            var request = new Protos.GetRoomRequest
            {
                Number = number,
            };
            var response = await _client.GetRoomAsync(request);
            var returnValue = (global::HotelCore.WcfProxy.Room)response.Value;
            return returnValue;
        }

        
        public async Task<Room[]> GetRooms(int[] numbers)
        {
            var request = new Protos.GetRoomsRequest();
            request.Numbers.AddRange(numbers);
            var response = await _client.GetRoomsAsync(request);
            var returnValue = response.Values.Select(x => (global::HotelCore.WcfProxy.Room)x).ToArray();
            return returnValue;
        }

        
        public IEnumerable<Room> AllRooms()
        {
            var request = new Protos.AllRoomsRequest();
            var streamingCall = _client.AllRooms(request);
            
            while (streamingCall.ResponseStream.MoveNext().GetAwaiter().GetResult())
            {
                var response = streamingCall.ResponseStream.Current;
                var returnValue = (global::HotelCore.WcfProxy.Room)response.Value;
                yield return returnValue;
            }
        }
        
        public void Dispose()
        {
            if (_channel is null) return;
            try
            {
                _channel.ShutdownAsync().GetAwaiter().GetResult();
            }
            catch
            {
                // Ignored
            }
        }
    }
}

