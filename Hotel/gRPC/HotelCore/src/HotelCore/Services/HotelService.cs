//
// This code was generated by Visual ReCode 1.0.0.0
//

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Google.Protobuf;
using Grpc.Core;
using HotelCore.Protos;

namespace HotelCore.Services
{
    public partial class HotelService : global::HotelCore.Protos.HotelService.HotelServiceBase
    {
            private readonly Hotel.IHotelService _serviceContract;
            private readonly ILogger<HotelService> _logger;
        
        public HotelService(Hotel.IHotelService serviceContract, ILogger<HotelService> logger)
        {
            _serviceContract = serviceContract;
            _logger = logger;
        }
        
        public override Task<Protos.GetAvailableRoomsResponse> GetAvailableRooms(Protos.GetAvailableRoomsRequest request, ServerCallContext context)
        {
            try
            {
                var returnValue = _serviceContract.GetAvailableRooms(request.CheckInDate.ToDateTimeOffset(), request.CheckOutDate.ToDateTimeOffset());
                var response = new Protos.GetAvailableRoomsResponse();
                response.Values.AddRange(returnValue.Select(x => (Protos.Room)x));
                return Task.FromResult(response);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error invoking GetAvailableRooms");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }
        
        public override Task<Protos.GetRoomResponse> GetRoom(Protos.GetRoomRequest request, ServerCallContext context)
        {
            try
            {
                var returnValue = _serviceContract.GetRoom(request.Number);
                var response = new Protos.GetRoomResponse { Value = (Protos.Room)returnValue };
                return Task.FromResult(response);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error invoking GetRoom");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }
        
        public override Task<Protos.GetRoomsResponse> GetRooms(Protos.GetRoomsRequest request, ServerCallContext context)
        {
            try
            {
                var returnValue = _serviceContract.GetRooms(request.Numbers.ToArray());
                var response = new Protos.GetRoomsResponse();
                response.Values.AddRange(returnValue.Select(x => (Protos.Room)x));
                return Task.FromResult(response);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error invoking GetRooms");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }
        
        public override async Task AllRooms(Protos.AllRoomsRequest request, IServerStreamWriter<AllRoomsResponse> responseStream, ServerCallContext context)
        {
            try
            {
                foreach (var item in _serviceContract.AllRooms())
                {
                    var response = new Protos.AllRoomsResponse { Value = (Protos.Room)item };
                    await responseStream.WriteAsync(response);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error invoking AllRooms");
                throw new RpcException(new Status(StatusCode.Internal, ex.Message));
            }
        }
        
    }
}

